function genTxt(myEBSD,Twin,Grains,fname)
    % Generates a text file with the relevant transformation data. The columns
    % are labelled as follows for each respective pixel: 
    %   Grain ID; Twin ID (1:4 for respecive rotations); Phase ID 
    % (transformation or reconstruction phase) Transformation euler angles 
    % (phi1,Phi,phi2)
    
    % Identify the phases
    TransID = myEBSD.Phase.ID{1};  % Phase ID for Transformation phase
    ReconID = myEBSD.Phase.ID{2};  % Phase ID for Reconstruction phase 
    
    % Homogenized Ebsd for MTEX purposes
    HomEb = myEBSD.Ebsd;
    RecEb = myEBSD.Recon.Ebsd;
    HomEb(RecEb.id)=RecEb;
    HomEb.phase = ReconID;
    
    % All pixel-specific orientations in the reconstructed image
    Ors = HomEb.orientations;
    % Grain and Twin IDs and corresponding EBSD indexing
    GrnId = Grains.grainId;
    EbId = zeros(length(HomEb),1)-1;
    EbId(RecEb.id) = Grains.EbsdId;
    
    % Likelihood's generated by reconstruction algorithm
    Like = zeros(length(HomEb),1)-1;
    Like(RecEb.id) = myEBSD.Recon.Likelihood;

    % Packet, block, and variant Ids
    PackIds = myEBSD.Packets.IDs;
    BlockIds = myEBSD.Blocks.IDs;
    VarIds = myEBSD.Variants.IDs;

    % Phase Ids for each pixel
    PhIds = myEBSD.Ebsd.phase;
    PhIds(RecEb.id) = myEBSD.Recon.PhaseIDs;

    % Phase Names
    TransPh = myEBSD.Phase.Name{1};
    ReconPh = myEBSD.Phase.Name{2};

    % Initial text file information
    fnametxt = fname;
    fnametxt = strrep(fnametxt,'.ang','.txt');
    RecTxt = fopen(fnametxt,'w');
    fprintf(RecTxt,'%s %s \n', 'Input File:',fname);
    fprintf(RecTxt,'%s \n','Phase IDs:');
    fprintf(RecTxt,'%s %s %d \n',TransPh,'->',TransID);
    fprintf(RecTxt,'%s %s %d \n \n',ReconPh,'->',ReconID);
    
    fprintf(RecTxt,'%s \n \n','Parent and Twin ID Descriptors:');    
    fprintf(RecTxt,'%s %s %s %s %s \n','Datapoint','TwinID','PacketID','BlockID','VariantID');
    fprintf(RecTxt,'%s %d %d %d %d \n','Unassigned',-1,0,0,0);
    fprintf(RecTxt,'%s %d %d%s%d %d%s%d %d%s%d \n','Parent',0,1,':',4,1,':',12,1,':',24);
    fprintf(RecTxt,'%s %d %d%s%d %d%s%d %d%s%d \n','60[111]',1,5,':',8,13,':',24,25,':',48);
    fprintf(RecTxt,'%s %d %d%s%d %d%s%d %d%s%d \n','60[-1-11]',2,9,':',12,25,':',36,49,':',72);
    fprintf(RecTxt,'%s %d %d%s%d %d%s%d %d%s%d \n','60[-111]',3,13,':',16,37,':',48,73,':',96);
    fprintf(RecTxt,'%s %d %d%s%d %d%s%d %d%s%d \n \n','60[1-11]',4,17,':',20,49,':',60,97,':',120);
%     fprintf(RecTxt,'%s \n','TwinID Numbering System (60 Degree Rotation About Specific Axis):');
%     fprintf(RecTxt,'%d %s %s \n',-1,'->','Parent With No Twin');
%     fprintf(RecTxt,'%d %s %s \n',0,'->','Parent Containing Twin');
%     fprintf(RecTxt,'%d %s %s%d%d%d%s \n',1,'->','[',1,1,1,']');
%     fprintf(RecTxt,'%d %s %s%d%d%d%s \n',2,'->','[',-1,-1,1,']');
%     fprintf(RecTxt,'%d %s %s%d%d%d%s \n',3,'->','[',-1,1,1,']');
%     fprintf(RecTxt,'%d %s %s%d%d%d%s \n \n',4,'->','[',1,-1,1,']');
%     fprintf(RecTxt,'%s \n','PacketID Numbering System (4 Packets Total Per Parent Or Twinned Region Within PAG):');
%     fprintf(RecTxt,'%d %s %s \n',0,'->','Unassigned');
%     fprintf(RecTxt,'%d %d %d %d %s %s \n',1,2,3,4,'->','Parent');
%     fprintf(RecTxt,'%d %d %d %d %s %s \n',5,6,7,8,'->','Twin [111]');
%     fprintf(RecTxt,'%d %d %d %d %s %s \n',9,10,11,12,'->','Twin [-1-11]');
%     fprintf(RecTxt,'%d %d %d %d %s %s \n',13,14,15,16,'->','Twin [-111]');
%     fprintf(RecTxt,'%d %d %d %d %s %s \n \n',17,18,19,20,'->','Twin [1-11]');
%     fprintf(RecTxt,'%s \n','BlockID Numbering System (12 Blocks Total Per Parent Or Twinned Region):');
%     fprintf(RecTxt,'%d %s %s \n',0,'->','Unassigned');
%     fprintf(RecTxt,'%d%s%d %s %s \n',1,':',12,'->','Parent');
%     fprintf(RecTxt,'%d%s%d %s %s \n',13,':',24,'->','Twin [111]');
%     fprintf(RecTxt,'%d%s%d %s %s \n',25,':',36,'->','Twin [-1-11]');
%     fprintf(RecTxt,'%d%s%d %s %s \n',37,':',48,'->','Twin [-111]');
%     fprintf(RecTxt,'%d%s%d %s %s \n',49,':',60,'->','Twin [1-11]');
    fprintf(RecTxt,'%s %s %s %s %s %s %s %s \n','GrainID','TwinID','PhaseID','PacketID','BlockID','VariantID','Euler Angles','Likelihood');

    t = size(Twin.Single.Or);
    tt = t(2);
    for i = 1:length(Ors)
        gId = EbId(i);
        pId = PhIds(i);
        tId = -1;  
        pckId = PackIds(i);
        blckId = BlockIds(i);
        varId = VarIds(i);
        phi1 = round(Ors(i).phi1,4);
        Phi = round(Ors(i).Phi,4);
        phi2 = round(Ors(i).phi2,4);
        conf = Like(i);
        Or = Ors(i);
        twn = GrnId(:,end);
        
        if gId == -1
        elseif gId >size(GrnId,1)
        elseif any(GrnId(gId,3:end)>0)
            tmp = twn(gId);
            if Or == Twin.Parent.Or{tmp}
                tId = 0;
            else
                for j = 1:tt
                    if isempty(Twin.Single.Or{tmp,j})==0
                        if Or == Twin.Single.Or{tmp,j}
                            tId = Twin.Single.ID{tmp,j};
                            pckId = (tId*4)+pckId;
                            blckId = (tId*12)+blckId;
                        end
                    end
                end
            end
%         elseif pId == TransID
%             tId = -2;
        end
        fprintf(RecTxt,'%d %d %d %d %d %d %f %f %f %f \n',gId,tId,pId,pckId,blckId,varId,phi1,Phi,phi2,conf);
    end
    RecTxt = fclose(RecTxt);
end

